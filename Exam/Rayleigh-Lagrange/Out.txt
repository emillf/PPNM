Part A) 
 
We generate a random 3x3 symmetric matrix A with values from 0 to 10

A = 

      8.49       6.27       7.18       1.35       4.61       3.59 
      6.27      0.338          9       8.15       1.23       1.72 
      7.18          9       1.84       8.95       5.82       7.94 
      1.35       8.15       8.95       7.81        4.1       9.26 
      4.61       1.23       5.82        4.1        8.3       7.65 
      3.59       1.72       7.94       9.26       7.65       6.11 


      6.49       6.27       7.18       1.35       4.61       3.59         -1 
      6.27      -1.66          9       8.15       1.23       1.72         -1 
      7.18          9     -0.161       8.95       5.82       7.94         -1 
      1.35       8.15       8.95       5.81        4.1       9.26         -1 
      4.61       1.23       5.82        4.1        6.3       7.65         -1 
      3.59       1.72       7.94       9.26       7.65       4.11         -1 
         2          2          2          2          2          2          0 

         1          1          1          1          1          1          2 

Using our method with initial guesses v = (1,1,1) and λ = 2 we get:

v =      0.35      0.329      0.462      0.472      0.374      0.439 

λ =  35.0873920427217

If we calculate Av and λ*v we get in time 0.0014963 s

Av =       12.3       11.5       16.2       16.6       13.1       15.4 

λv =      12.3       11.5       16.2       16.6       13.1       15.4 

So the method works as we see Av = λv

We time the process for a larger and larger n x n symmetric matrix in the plot.

To remove variation in the quality of the starting guess, the n x n matrix will be a tridiagonal toeplitz matrix.

Entries are defined as A[i,i] = -1, and A[i+1,i]=A[i,i+1]=2 (for 1<=i<=n-1),

With the kth eigenvalue λ_k = 2-2*cos(k*pi/(n+1))

and corresponding eigenvector entries v_j=sqrt(2/(n+1))*sin(j*k*pi/(n+1))

This ensures well spaced eigenvalues and some offdiagonal terms. 
I can thus choose λstart = 2 and vstart=(1,1,1,1,....)

As can be seen in Time_plot time goes like O(n^2), so generally around n=400 it becomes unfeasible for my box

The exact time it becomes unfeasible also depends on the matrix choice and guess quality of course.

I tried a random 100x100 matrix with the same start guesses as the toeplitz this took about twice as long as the 100x100 toeplitz


Part C)

 Calculating several lowest eigenfunctions of the hydrogen atom requires solving the eigenvalue problem Hu=Eu

Where H[i,i]=-1/h^2+l(l+1)/(2r[i]^2)-1/r_i and H[i,i±1]=1/(2h^2), where h is small.

This equation has been derived by expanding the derivatives of u the radial Schrödinger equation in atomic units.

Like in our roots exercise, we choose rmax to be 30 and rmin=0.05

We calculate the n=1 l=0, n=2 l=0 and n=2 l=1  lowest states of the Hydrogen atom

 These give us the energies -0.485254326383746 -0.189316926540554 and -0.189316926540554 respectively (in hartrees)

Also see that ||H_(l=0)*u_10||^2 - ||E_1*un1||^2=0.000,||H_(l=0)*u_20||^2 - ||E_2*u_20||^2=0.000

and that |H_(l=1)*u_21||^2 - ||E2*u_21||^2=0.000

So the wrong energies (they should be -1/2,-1/8,-1/8) are probably not due to the linesearch failing.

Rather it is likely due to needing better step length, smaller rmin and rmax which is not feasible as H becomes too large,

Or a way to write H which enforces the boundary conditions better - namely u(rmin)=rmin-rmin^2

A plot of the correstponding reduced radial wavefunctions can be found in Eigenfuncs.svg
